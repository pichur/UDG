Total time: 5.66157 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\udg.py
Function: udg_recognition at line 193

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   193                                               def udg_recognition(self):
   194         1         47.0     47.0      0.0          self.start_time = time.time()
   195         1         10.0     10.0      0.0          self.last_verbose_time = self.start_time
   196                                           
   197         1        965.0    965.0      0.0          if not self.is_connected():
   198                                                       self.stop_time = time.time()
   199                                                       if self.verbose:
   200                                                           print("Graph is not connected, cannot be a UDG.")
   201                                                       return False
   202                                           
   203         1        161.0    161.0      0.0          if self.is_full():
   204                                                       self.stop_time = time.time()
   205                                                       if self.verbose:
   206                                                           print("Graph is full, it is a UDG.")
   207                                                       return True
   208                                                   
   209                                                   #self.calculate_order_path()
   210         1       1576.0   1576.0      0.0          self.calculate_order_degree_level(desc = False)
   211                                           
   212         1          5.0      5.0      0.0          while True:
   213         1          5.0      5.0      0.0              if self.verbose:
   214                                                           print(f"Checking unit: {self.unit}")
   215         1   56612856.0    6e+07    100.0              result = self.has_discrete_realization()
   216         1         11.0     11.0      0.0              if result == YES:
   217         1         80.0     80.0      0.0                  self.stop_time = time.time()
   218         1         10.0     10.0      0.0                  return True
   219                                                       if result == NO:
   220                                                           self.stop_time = time.time()
   221                                                           return False
   222                                                       if self.is_limit_achieved():
   223                                                           self.stop_time = time.time()
   224                                                           if self.verbose:
   225                                                               print("Reached max unit = {self.unit}, no realization found.")
   226                                                           return False
   227                                           
   228                                                       self.refine_granularity()




Total time: 5.66127 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\udg.py
Function: has_discrete_realization at line 258

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   258                                               def has_discrete_realization(self):
   259         1         11.0     11.0      0.0          for only_I in [True, False]:
   260         1          8.0      8.0      0.0              if self.verbose:
   261                                                           print(f"  {'Inner' if only_I else 'All'}")
   262         1          4.0      4.0      0.0              count_I: int = 0
   263         1          5.0      5.0      0.0              count_B: int = 0
   264         1   56612692.0    6e+07    100.0              result = self.place_next_vertex(0, only_I, count_I, count_B)
   265         1         12.0     12.0      0.0              if result == YES:
   266         1         13.0     13.0      0.0                  return YES
   267                                                   return result




Total time: 5.39702 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\udg.py
Function: place_next_vertex at line 269

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   269                                               def place_next_vertex(self, j: int, only_I: bool, count_I: int, count_B: int):
   270     20726     200003.0      9.6      0.4          v_index = self.order[j]
   271                                           
   272     20726   41474221.0   2001.1     76.8          P = self.candidate_points(j, only_I, count_I, count_B)
   273                                           
   274     20726     149638.0      7.2      0.3          found_trigraph = False
   275     20726     178317.0      8.6      0.3          if self.verbose:
   276                                                       self.set_iteration_len(v_index, len(P))
   277     20726     138134.0      6.7      0.3          point_iter = -1
   278     41447     400879.0      9.7      0.7          for p in P:
   279     20726    1798316.0     86.8      3.3              incr_I = 1 if p.mode == MODE_I else 0
   280     20726    1179569.0     56.9      2.2              incr_B = 1 if p.mode == MODE_B else 0
   281                                           
   282     20726    1917050.0     92.5      3.6              self.set_coordinate(v_index, p.x, p.y, p.mode)
   283     20726    4874016.0    235.2      9.0              self.clear_previous_area(j)
   284                                           
   285     20726     169614.0      8.2      0.3              if self.verbose:
   286                                                           point_iter += 1
   287                                                           self.set_iteration_index(v_index, point_iter)
   288                                                           if time.time() - self.last_verbose_time > 10:
   289                                                               self.last_verbose_time = time.time()
   290                                                               print("  placing " + self.state_info(only_I, j))
   291     20726     260098.0     12.5      0.5              if j < self.n - 1:
   292     20725     458639.0     22.1      0.8                  result = self.place_next_vertex(j + 1, only_I, count_I + incr_I, count_B + incr_B)
   293     20725     244072.0     11.8      0.5                  if result == YES:
   294         4         44.0     11.0      0.0                      return YES
   295     20721     220964.0     10.7      0.4                  if result == TRIGRAPH:
   296                                                               if not only_I:
   297                                                                   return TRIGRAPH
   298                                                               found_trigraph=True
   299                                                       else:
   300                                                           # if self.is_udg_realization():
   301         1         16.0     16.0      0.0                  if count_I + incr_I == self.n:
   302         1         14.0     14.0      0.0                      return YES
   303                                                           if not only_I:
   304                                                               return TRIGRAPH
   305                                                           found_trigraph = True
   306                                                   
   307     20721     137559.0      6.6      0.3          if not found_trigraph:
   308     20721     169002.0      8.2      0.3              return NO
   309                                           
   310                                                   return TRIGRAPH




Total time: 3.86932 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\udg.py
Function: candidate_points at line 326

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   326                                               def candidate_points(self, j: int, only_I: bool, count_I: int, count_B: int) -> list[Coordinate]:
   327     20726     159364.0      7.7      0.4          P = []
   328     20726     179073.0      8.6      0.5          if j == 0:
   329         1         82.0     82.0      0.0              P.append(Coordinate(x = 0, y = 0, mode = MODE_I))
   330         1          4.0      4.0      0.0              return P
   331     20725     184678.0      8.9      0.5          if j == 1:
   332         1          6.0      6.0      0.0              if only_I:
   333         7         83.0     11.9      0.0                  for x in range(0, discrete_disk.RI[self.unit]):
   334         6        378.0     63.0      0.0                      P.append(Coordinate(x = x, y = 0, mode = MODE_I))
   335                                                       else:
   336                                                           for x in range(0, discrete_disk.RO[self.unit]):
   337                                                               P.append(Coordinate(x = x, y = 0, mode = MODE_I if x <= discrete_disk.RI[self.unit] else MODE_B))
   338         1          5.0      5.0      0.0              return P
   339                                           
   340     20724     171291.0      8.3      0.4          i = j - 2
   341     21002     354843.0     16.9      0.9          while i >= 0 and self.previous_area[j][i] is DISK_NONE:
   342       278       2967.0     10.7      0.0              i -= 1
   343                                           
   344     20724     923059.0     44.5      2.4          neighbors_v_order_j = self.neighbors(self.order[j])
   345                                           
   346     41726     743256.0     17.8      1.9          for k in range(i+1, j):
   347     21002     253365.0     12.1      0.7              coord_v_order_k = self.coordinates[self.order[k]]
   348     21002    5007040.0    238.4     12.9              area = DiscreteDisk.disk(self.unit, coord_v_order_k.x, coord_v_order_k.y, connected = self.order[k] in neighbors_v_order_j)
   349     21002     181924.0      8.7      0.5              if k > 0:
   350     20999     269802.0     12.8      0.7                  prev_area = self.previous_area[j][k-1]
   351     20999   14680080.0    699.1     37.9                  area = create_area_by_join(prev_area, area)
   352     21002     320484.0     15.3      0.8              self.previous_area[j][k] = area
   353                                           
   354     20724     167863.0      8.1      0.4          if j == 2:
   355         5      94232.0  18846.4      0.2              P = [p for p in area.points_iter(types = ('I' if only_I else 'IB')) if p.y >= 0]
   356         5         42.0      8.4      0.0              return P
   357                                                   else: 
   358     20719   14999255.0    723.9     38.8              return area.points_list(types = ('I' if only_I else 'IB'))




Total time: 1.42399 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\discrete_disk.py
Function: points_list at line 148

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   148                                               def points_list(self, types: str = 'IB') -> list[Coordinate]:
   149     20719   14239923.0    687.3    100.0          return list(self.points_iter(types))




Total time: 1.16127 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\discrete_disk.py
Function: points_iter at line 127

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   127                                               def points_iter(self, types: str = 'IB'):
   128                                                   """Iterate over points of selected types."""
   129     20724     205017.0      9.9      1.8          if types == 'I':
   130     20724    2540309.0    122.6     21.9              mask = (self.data == MODE_I) 
   131                                                   elif types == 'B':
   132                                                       mask = (self.data == MODE_B) 
   133                                                   elif types == 'IB' or types == 'BI':
   134                                                       mask = (self.data == MODE_I) | (self.data == MODE_B)
   135                                                   else:
   136                                                       raise ValueError('Not supported types: {types}')
   137                                                   
   138     20724    4627419.0    223.3     39.8          ys, xs = np.nonzero(mask)
   139     20724     998839.0     48.2      8.6          values = self.data[ys, xs]
   140     20724     217648.0     10.5      1.9          x0, y0 = self.x, self.y
   141     41818    1464844.0     35.0     12.6          for iy, ix, val in zip(ys, xs, values):
   142     21094    1558628.0     73.9     13.4              yield Coordinate(x0 + ix, y0 + iy, val)




Total time: 1.18361 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\discrete_disk.py
Function: create_area_by_join at line 293

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   293                                           def create_area_by_join(a: DiscreteDisk, b: DiscreteDisk) -> DiscreteDisk:
   294                                               """Join area, increase shape if need."""
   295                                           
   296     20999     392375.0     18.7      3.3      ah, aw = a.data.shape
   297     20999     244482.0     11.6      2.1      bh, bw = b.data.shape
   298                                               
   299                                               # Basic operation, result is overlap region
   300     20999     468844.0     22.3      4.0      min_x = max(a.x     , b.x     )
   301     20999     330975.0     15.8      2.8      min_y = max(a.y     , b.y     )
   302     20999     466200.0     22.2      3.9      max_x = min(a.x + aw, b.x + bw)
   303     20999     407318.0     19.4      3.4      max_y = min(a.y + ah, b.y + bh)
   304                                           
   305     20999     194706.0      9.3      1.6      w = max_x - min_x
   306     20999     175924.0      8.4      1.5      h = max_y - min_y
   307                                           
   308     20999     253719.0     12.1      2.1      if w > 0 and h > 0:
   309     20999     196438.0      9.4      1.7          ax = min_x - a.x
   310     20999     198062.0      9.4      1.7          ay = min_y - a.y
   311     20999     202369.0      9.6      1.7          bx = min_x - b.x
   312     20999     195633.0      9.3      1.7          by = min_y - b.y
   313     20999    4241079.0    202.0     35.8          M = TBL_AND[a.data[ay:ay+h, ax:ax+w], b.data[by:by+h, bx:bx+w]]
   314                                               else:
   315                                                   M = DISK_NONE
   316                                           
   317     20999     323247.0     15.4      2.7      if a.rest == MODE_O and b.rest == MODE_O:
   318                                                   # Both Outer
   319     20994     176885.0      8.4      1.5          if M is DISK_NONE:
   320                                                       return DISK_OUTER
   321                                                   else:
   322     20994    3365509.0    160.3     28.4              return DiscreteDisk(M, MODE_O, min_x, min_y, False).crop()
   323         5         75.0     15.0      0.0      elif a.rest == MODE_O or b.rest == MODE_O:
   324                                                   # One Outer other Inner
   325         5         47.0      9.4      0.0          if M is DISK_NONE:
   326                                                       return DISK_OUTER
   327                                                   else:
   328         5         60.0     12.0      0.0              o = a if a.rest == MODE_O else b
   329         5         51.0     10.2      0.0              ox = min_x - o.x
   330         5         46.0      9.2      0.0              oy = min_y - o.y
   331         5        334.0     66.8      0.0              OM = o.data.copy()
   332         5        884.0    176.8      0.0              np.copyto(OM[oy:oy+h, ox:ox+w], M)
   333         5        842.0    168.4      0.0              return DiscreteDisk(OM, MODE_O, o.x, o.y, False).crop()
   334                                               else:
   335                                                   # Both Inner
   336                                                   min_x_oo = min(a.x     , b.x     )
   337                                                   min_y_oo = min(a.y     , b.y     )
   338                                                   max_x_oo = max(a.x + aw, b.x + bw)
   339                                                   max_y_oo = max(a.y + ah, b.y + bh)
   340                                           
   341                                                   w_oo = max_x_oo - min_x_oo
   342                                                   h_oo = max_y_oo - min_y_oo
   343                                                   
   344                                                   MOO = np.full((h_oo, w_oo), MODE_I, dtype=np.uint8)
   345                                           
   346                                                   ax_oo = a.x - min_x_oo
   347                                                   ay_oo = a.y - min_y_oo
   348                                                   np.copyto(MOO[ay_oo:ay_oo+ah, ax_oo:ax_oo+aw], a.data)
   349                                           
   350                                                   bx_oo = b.x - min_x_oo
   351                                                   by_oo = b.y - min_y_oo
   352                                                   np.copyto(MOO[by_oo:by_oo+bh, bx_oo:bx_oo+bw], b.data)
   353                                           
   354                                                   if M is not DISK_NONE:
   355                                                       x_oo = min_x - min_x_oo
   356                                                       y_oo = min_y - min_y_oo
   357                                                       np.copyto(MOO[y_oo:y_oo+h, x_oo:x_oo+w], M)
   358                                           
   359                                                   return DiscreteDisk(MOO, MODE_I, min_x_oo, min_y_oo, False).crop()




Total time: 0.0374151 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\discrete_disk.py
Function: crop at line 218

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   218                                               def crop(self) -> "DiscreteDisk":
   219                                                   """Crop the matrix by removing outer rows/columns with values equal to self.rest."""
   220     20999     241131.0     11.5     64.4          if not opts.crop:
   221     20999     133020.0      6.3     35.6              return self
   222                                                   
   223                                                   mask = self.data != self.rest
   224                                           
   225                                                   # Find bounds
   226                                                   rows = np.any(mask, axis=1)
   227                                                   cols = np.any(mask, axis=0)
   228                                           
   229                                                   if not np.any(rows) or not np.any(cols):
   230                                                       # All values are rest, return minimal disk
   231                                                       return DISK_INNER if self.rest == MODE_I else DISK_OUTER
   232                                           
   233                                                   y0, y1 = np.where(rows)[0][[0, -1]]
   234                                                   x0, x1 = np.where(cols)[0][[0, -1]]
   235                                           
   236                                                   self.data = self.data[y0:y1+1, x0:x1+1]
   237                                                   self.x += x0
   238                                                   self.y += y0
   239                                           
   240                                                   return self




Total time: 0.267604 s
File: C:\Users\Acer\OneDrive\StDoc\proj\UDG\UDG\udg.py
Function: clear_previous_area at line 109

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   109                                               def clear_previous_area(self, order_index: int):
   110     20726     451984.0     21.8     16.9          fill = [DISK_NONE] * (self.n - order_index)
   111    124356    1013318.0      8.1     37.9          for row in self.previous_area:
   112    103630    1210742.0     11.7     45.2              row[order_index:] = fill
